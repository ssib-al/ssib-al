// Code generated by ent, DO NOT EDIT.

package link

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"ssib.al/ssib-al-back/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldID, id))
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldDomain, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldURI, v))
}

// TargetURL applies equality check predicate on the "target_url" field. It's identical to TargetURLEQ.
func TargetURL(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldTargetURL, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldOwnerID, v))
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldDomain, v))
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldDomain, v))
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldDomain, vs...))
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldDomain, vs...))
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldDomain, v))
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldDomain, v))
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldDomain, v))
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldDomain, v))
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldDomain, v))
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldDomain, v))
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldDomain, v))
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldDomain, v))
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldDomain, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldURI, v))
}

// TargetURLEQ applies the EQ predicate on the "target_url" field.
func TargetURLEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldTargetURL, v))
}

// TargetURLNEQ applies the NEQ predicate on the "target_url" field.
func TargetURLNEQ(v string) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldTargetURL, v))
}

// TargetURLIn applies the In predicate on the "target_url" field.
func TargetURLIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldTargetURL, vs...))
}

// TargetURLNotIn applies the NotIn predicate on the "target_url" field.
func TargetURLNotIn(vs ...string) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldTargetURL, vs...))
}

// TargetURLGT applies the GT predicate on the "target_url" field.
func TargetURLGT(v string) predicate.Link {
	return predicate.Link(sql.FieldGT(FieldTargetURL, v))
}

// TargetURLGTE applies the GTE predicate on the "target_url" field.
func TargetURLGTE(v string) predicate.Link {
	return predicate.Link(sql.FieldGTE(FieldTargetURL, v))
}

// TargetURLLT applies the LT predicate on the "target_url" field.
func TargetURLLT(v string) predicate.Link {
	return predicate.Link(sql.FieldLT(FieldTargetURL, v))
}

// TargetURLLTE applies the LTE predicate on the "target_url" field.
func TargetURLLTE(v string) predicate.Link {
	return predicate.Link(sql.FieldLTE(FieldTargetURL, v))
}

// TargetURLContains applies the Contains predicate on the "target_url" field.
func TargetURLContains(v string) predicate.Link {
	return predicate.Link(sql.FieldContains(FieldTargetURL, v))
}

// TargetURLHasPrefix applies the HasPrefix predicate on the "target_url" field.
func TargetURLHasPrefix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasPrefix(FieldTargetURL, v))
}

// TargetURLHasSuffix applies the HasSuffix predicate on the "target_url" field.
func TargetURLHasSuffix(v string) predicate.Link {
	return predicate.Link(sql.FieldHasSuffix(FieldTargetURL, v))
}

// TargetURLEqualFold applies the EqualFold predicate on the "target_url" field.
func TargetURLEqualFold(v string) predicate.Link {
	return predicate.Link(sql.FieldEqualFold(FieldTargetURL, v))
}

// TargetURLContainsFold applies the ContainsFold predicate on the "target_url" field.
func TargetURLContainsFold(v string) predicate.Link {
	return predicate.Link(sql.FieldContainsFold(FieldTargetURL, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...uuid.UUID) predicate.Link {
	return predicate.Link(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.Link {
	return predicate.Link(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.Link {
	return predicate.Link(sql.FieldNotNull(FieldOwnerID))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Link {
	return predicate.Link(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Link) predicate.Link {
	return predicate.Link(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Link) predicate.Link {
	return predicate.Link(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Link) predicate.Link {
	return predicate.Link(sql.NotPredicates(p))
}
